test4 <- group_by(test2, evtype) %>%
summarise(injuries = sum(injuries, na.rm=T), fatalities = sum(fatalities, na.rm=T)) %>%
arrange(desc(injuries))
test4
qplot(evtype, injuries, data=test4)
test5 <- head(test4)
qplot(evtype, injuries, data=test4)
qplot(evtype, injuries, data=test5)
test6 <- arrange(test4, desc(fatalities))
qplot(evtype, fatalities, data=test6)
test6 <- head(arrange(test4, desc(fatalities)),10)
qplot(evtype, fatalities, data=test6)
evtype.health <- group_by(subset,year, evtype) %>%
summarise(injuries = sum(injuries), fatalities = sum(fatalities))
evtype.health
weighted.evtype.health <- weighted.injuries
weighted.evtype.health$fatalities <- weighted.fatalities$fatalities
evtype.health <- group_by(subset,year, evtype) %>%
summarise(injuries = sum(injuries), fatalities = sum(fatalities))
weighted.injuries <- select(test, -fatalities) %>%
spread(evtype, injuries)
weighted.injuries[,2:length(weighted.injuries)] <- apply(weighted.injuries[,2:length(weighted.injuries)], 2, function(x) x*yearly.observations$weighting)
weighted.injuries <- gather(weighted.injuries, evtype, injuries, -year)
weighted.fatalities <- select(test, -injuries) %>%
spread(evtype, fatalities)
weighted.fatalities[,2:length(weighted.fatalities)] <- apply(weighted.fatalities[,2:length(weighted.fatalities)], 2, function(x) x*yearly.observations$weighting)
weighted.fatalities <- gather(weighted.fatalities, evtype, fatalities, -year)
weighted.evtype.health <- weighted.injuries
weighted.evtype.health$fatalities <- weighted.fatalities$fatalities
View(weighted.evtype.health)
qplot(head(evtype), injuries, data=test5)
qplot(head(arrange(test4, desc(fatalities)),10), fatalities, data=test6)
qplot(evtype, fatalities, head(arrange(test4, desc(fatalities)),10))
temp <- head(arrange(test4, desc(fatalities)),10)
qplot(evtype, fatalities, data=temp)
temp <- head(arrange(total.injuries, desc(injuries)),10)
total.injuries <- group_by(test2, evtype) %>%
summarise(injuries = sum(injuries, na.rm=T), fatalities = sum(fatalities, na.rm=T)) %>%
arrange(desc(injuries))
temp <- head(arrange(total.injuries, desc(injuries)),10)
qplot(head(evtype), injuries, data=total.injuries)
qplot(head(evtype), injuries, data=temp)
qplot(evtype, injuries, data=temp)
temp <- head(arrange(total.injuries, desc(fatalities)),10)
qplot(evtype, fatalities, data=temp)
temp <- head(arrange(total.injuries, desc(injuries)),10)
qplot(evtype, injuries, data=temp)
temp <- head(arrange(total.injuries, desc(fatalities)),10)
qplot(evtype, fatalities, data=temp)
evtype.health <- group_by(subset,year, evtype) %>%
summarise(injuries = sum(injuries), fatalities = sum(fatalities))
weighted.injuries <- select(evtype.health, -fatalities) %>%
spread(evtype, injuries)
weighted.injuries[,2:length(weighted.injuries)] <- apply(weighted.injuries[,2:length(weighted.injuries)], 2, function(x) x*yearly.observations$weighting)
weighted.injuries <- gather(weighted.injuries, evtype, injuries, -year)
weighted.fatalities <- select(evtype.health, -injuries) %>%
spread(evtype, fatalities)
weighted.fatalities[,2:length(weighted.fatalities)] <- apply(weighted.fatalities[,2:length(weighted.fatalities)], 2, function(x) x*yearly.observations$weighting)
weighted.fatalities <- gather(weighted.fatalities, evtype, fatalities, -year)
weighted.evtype.health <- weighted.injuries
weighted.evtype.health$fatalities <- weighted.fatalities$fatalities
total.injuries <- group_by(weighted.evtype.health, evtype) %>%
summarise(injuries = sum(injuries, na.rm=T), fatalities = sum(fatalities, na.rm=T)) %>%
arrange(desc(injuries))
temp <- head(arrange(total.injuries, desc(injuries)),10)
qplot(evtype, injuries, data=temp)
temp <- head(arrange(total.injuries, desc(fatalities)),10)
qplot(evtype, fatalities, data=temp)
View(head(subset))
str(subset)
levels(subset$propdmgexp)
table(subset$propdmgexp)
table(subset$cropdmgexp)
subset$cropdmgexp <- factor(subset$cropdmgexp)
subset$propdmgexp <- factor(subset$propdmgexp)
levels(subset$propdmgexp)
subset["propdmgexp]
subset["propdmgexp"]
subset["propdmgexp"]
subset["propdmgexp" == 0]
subset["cropdmgexp" == 0]
levels(subset$propdmgexp)
subset$propdmgexp == "0"
subset[subset$propdmgexp == "0",]
filter(subset, propdmgexp == 0)
subset[propdmgexp == "0"]
subset$propdmgexp == "0"
sum(subset$propdmgexp == "0")
sum(subset$propdmgexp == "0", is.na=T)
table(subset$propdmgexp == "0")
?grepl
subset[subset$propdmgexp == "0"]
subset[subset$propdmgexp == "0",]
test <- subset[subset$propdmgexp == "0",]
summary(test)
??which
which(subset$propdmgex == "0"])
which(subset$propdmgex == "0")
which(subset$propdmgexp == "0")
which(subset$prmgexp == "0")
which(subset$propdmgexp == "0")
subset$propdmgexp[which(subset$propdmgexp == "0")] <- NA
filter(subset, propdmgexp == "0")
?ifelse
?typeof
factor(propdmgexp)
factor(subset$propdmgexp)
?switch
table(subset$cropdmgexp)
?ifelse
ifelse(subset$cropdmgexp == "K", subset$cropdamage = cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage = cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage = cropdamage * 1000000000, subset$cropdamage = NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage = cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage = cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage = subset$cropdamage * 1000000000, subset$cropdamage = NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage = cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage = cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage = subset$cropdamage * 1000000000, subset$cropdamage = NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage = (cropdmg * 1000),
ifelse(cropdmgexp == "M", subset$cropdamage = (cropdmg * 1000000),
ifelse(cropdmgexp == "B", subset$cropdamage = (subset$cropdamage * 1000000000), subset$cropdamage = NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage <- cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage <- cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage <- subset$cropdamage * 1000000000, subset$cropdamage = NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage <- cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage <- cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage <- subset$cropdamage * 1000000000, subset$cropdamage <- NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage <- subset$cropdmg * 1000,
ifelse(cropdmgexp == "M", subset$cropdamage <- subset$cropdmg * 1000000,
ifelse(cropdmgexp == "B", subset$cropdamage <- subset$cropdamage * 1000000000, subset$cropdamage <- NA)))
ifelse(subset$cropdmgexp == "K", subset$cropdamage <- subset$cropdmg * 1000,
ifelse(subset$cropdmgexp == "M", subset$cropdamage <- subset$cropdmg * 1000000,
ifelse(subset$cropdmgexp == "B", subset$cropdamage <- subset$cropdamage * 1000000000, subset$cropdamage <- NA)))
if(subset$cropdmgexp == "K") subset$cropdamage <- subset$cropdmg * 1000
else if (subset$cropdmgexp == "M") subset$cropdamage <- subset$cropdmg * 1000000
else if (subset$cropdmgexp == "B") subset$cropdamage <- subset$cropdmg * 1000000000
?else
if {(subset$cropdmgexp == "K") subset$cropdamage <- subset$cropdmg * 1000}
else if {(subset$cropdmgexp == "M") subset$cropdamage <- subset$cropdmg * 1000000}
else if {(subset$cropdmgexp == "B") subset$cropdamage <- subset$cropdmg * 1000000000}
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
}
summary(subset$cropdamage)
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
}
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
}
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
} else (subset$cropdamage <- NA
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else (subset$propdamage <- NA)
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
} else {(subset$cropdamage <- NA
}
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else {(subset$propdamage <- NA)
}
View(head(subset$cropdamage))
View(head(subset$cropdamage, 100))
table(subset$cropdamage)
table(subset$cropdmg)
damage.analysis <- select(subset, evtype, cropdamage, propdamage)
damage.analysis
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
arrange(desc(cropdamage))
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
group_by(evtype) %>%
mutate(cropdamage = sum(cropdamage), propdamage = sum(propdamage)) %>%
arrange(desc(cropdamage)
View(head(damage.analysis))
View(head(damage.analysis))
?qplot
qplot(evtype, cropdamage, data=damage.analysis)
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
group_by(evtype) %>%
mutate(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
qplot(evtype, cropdamage, data=damage.analysis)
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
group_by(evtype) %>%
mutate(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
group_by(evtype) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
qplot(year, evtype, data=damage.analysis)
qplot(evtype, cropdamage, data=damage.analysis)
qplot(evtype, propdamage, data=damage.analysis)
qplot(evtype, propdamage, data=head(damage.analysis))
qplot(evtype, cropdamage, data=head(damage.analysis))
qplot(evtype, propdamage, data=head(damage.analysis))
damage.analysis <- select(subset, evtype, cropdamage, propdamage) %>%
group_by(evtype, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
damage.analysis <- select(subset, evtype, cropdamage, propdamage, year) %>%
group_by(evtype, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
head(damage.analysis)
weighted.cropdmg <- select(damage.analysis, -propdamage) %>%
spread(evtype, cropdamage)
weighted.cropdmg
View(weighted.cropdmg)
weighted.cropdmg <- select(damage.analysis, -propdamage) %>%
spread(evtype, cropdamage)
weighted.cropdmg[,2:length(weighted.cropdmg)] <- apply(weighted.cropdmg[,2:length(weighted.cropdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.cropdmg <- gather(weighted.cropdmg, evtype, injuries, -year)
View(weighted.cropdmg)
weighted.propdmg <- select(damage.analysis, -cropdamage) %>%
spread(evtype, propdamage)
weighted.propdmg[,2:length(weighted.propdmg)] <- apply(weighted.propdmg[,2:length(weighted.propdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.propdmg <- gather(weighted.propdmg, evtype, injuries, -year)
weighted.damage <- weighted.cropdmg
weighted.damage$propdamage <- weighted.cropdmg$cropdamage
View(weighted.damage)
damage.analysis <- select(subset, evtype, cropdamage, propdamage, year) %>%
group_by(evtype, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
weighted.cropdmg <- select(damage.analysis, -propdamage) %>%
spread(evtype, cropdamage)
weighted.cropdmg[,2:length(weighted.cropdmg)] <- apply(weighted.cropdmg[,2:length(weighted.cropdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.cropdmg <- gather(weighted.cropdmg, evtype, cropdamage, -year)
weighted.propdmg <- select(damage.analysis, -cropdamage) %>%
spread(evtype, propdamage)
weighted.propdmg[,2:length(weighted.propdmg)] <- apply(weighted.propdmg[,2:length(weighted.propdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.propdmg <- gather(weighted.propdmg, evtype, propdamage, -year)
weighted.damage <- weighted.cropdmg
weighted.damage$propdamage <- weighted.cropdmg$cropdamage
View(weighted.damage)
damage.analysis <- select(subset, evtype, cropdamage, propdamage, year) %>%
group_by(evtype, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
weighted.cropdmg <- select(damage.analysis, -propdamage) %>%
spread(evtype, cropdamage)
weighted.cropdmg[,2:length(weighted.cropdmg)] <- apply(weighted.cropdmg[,2:length(weighted.cropdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.cropdmg <- gather(weighted.cropdmg, evtype, cropdamage, -year)
weighted.propdmg <- select(damage.analysis, -cropdamage) %>%
spread(evtype, propdamage)
weighted.propdmg[,2:length(weighted.propdmg)] <- apply(weighted.propdmg[,2:length(weighted.propdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.propdmg <- gather(weighted.propdmg, evtype, propdamage, -year)
weighted.damage <- weighted.cropdmg
weighted.damage$propdamage <- weighted.propdmg$propdamage
View(weighted.damage)
group_by(weighted.damage, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
group_by(weighted.damage, year) %>%
summarise(cropdamage = sum(cropdamage, is.na=T), propdamage = sum(propdamage, is.na=T))
?sum
group_by(weighted.damage, year) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
group_by(weighted.damage, evtype) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
test <- group_by(weighted.damage, evtype) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
qplot(evtype,  cropdamage, data=test)
test <- group_by(weighted.damage, evtype) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
qplot(evtype,  cropdamage, data=head(test))
?arrange
test <- group_by(weighted.damage, evtype) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
temp <- arrange(test, desc(cropdamage))
qplot(evtype,  cropdamage, data=head(temp))
temp <- arrange(test, desc(propdamage))
qplot(evtype, propdamage, data=head)
temp <- arrange(test, desc(propdamage))
qplot(evtype, propdamage, data=head(temp))
library(knitr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
opts_chunk$set(cache=TRUE)
library(knitr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
opts_chunk$set(cache=TRUE)
url = "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url, "stormData.csv.bz2")
stormData <- read.csv("stormData.csv.bz2", na.strings = "")
data <- stormData
data$BGN_DATE <- as.Date(data$BGN_DATE, format="%m/%d/%Y %H:%M:%S")
data$END_DATE <- as.Date(data$END_DATE, format = "%m/%d/%Y %H:%M:%S")
data <- mutate(data, year=year(BGN_DATE))
# Tidying the names, so lower case and no "_/ /."
names(data) <- tolower(names(data))
names(data) <- gsub("_", "x", names(data))
years <- mutate(data, year= year(bgnxdate)) %>%
group_by(year) %>%
summarise(number=n())
qplot(year, number, data=years)
length(levels(as.factor(data$evtype)))
evtype.levels <- group_by(data, evtype) %>%
summarise(number = n()) %>%
arrange(desc(number))
head(evtype.levels)
eventNames <- c("Astronomical Low Tide", "Avalanche", "Blizzard", "Coastal Flood", "Cold/Wind Chill", "Debris Flow", "Dense Fog", "Dense Smoke", "Drought", "Dust Devil", "Dust Storm", "Excessive Heat", "Extreme Cold/Wind Chill", "Flash Flood", "Flood", "Frost/Freeze", "Funnel Cloud", "Freezing Fog", "Hail", "Heat", "Heavy Rain", "Heavy Snow", "High Surf", "High Wind", "Hurricane (Typhoon)", "Ice Storm", "Lake-Effect Snow", "Lakeshore Flood", "Lightning", "Marine Hail", "Marine High Wind", "Marine Strong Wind", "Marine Thunderstorm Wind", "Rip Current", "Seiche", "Sleet", "Storm Surge/Tide", "Strong Wind", "Thunderstorm Wind", "Tornado", "Tropical Depression", "Tropical Storm", "Tsunami", "Volcanic Ash", "Waterspout", "Wildfire", "Winter Storm", "Winter Weather")
eventNames <- tolower(eventNames)
data$evtype <- tolower(data$evtype)
matches <- sapply(data$evtype, function(x) x %in% eventNames)
sum(matches) / nrow(data)
matched <- data[matches,]
not.matched <- group_by(data[!matches,], evtype) %>%
summarise(number = n()) %>%
arrange(desc(number))
sum(not.matched[1:10,2]) / sum(not.matched[,2])
data$evtype <- sapply(data$evtype, function(x) gsub("s+$", "", x))
matches <- sapply(data$evtype, function(x) x %in% eventNames)
sum(matches) / nrow(data)
# tstm wind -(stands for too small to measure) this puts it in the strong wind category (as long as some injury or damage or fatality was suffered. (p.s. having the requirement of damage for definition will skew the analysis to say low speed wind is dangerous!)
# Note the majority of the tstm winds did not have injuries/fatalities/damage so were left alone
data$evtype <-
ifelse(grepl("tstm wind", data$evtype) & ((data["fatalities"] > 0) | (data["injuries"] > 0) | (data["propdmg"] > 0) | (data["cropdmg"] > 0)),
sub("tstm wind", "strong wind", data$evtype),
as.character(data$evtype))
# marine tstm wind == marine strong wind (as long as injury / damage / fatality > 0)
data$evtype <-
ifelse(grepl("marine tstm wind", data$evtype) & ((data["fatalities"] > 0) | (data["injuries"] > 0) | (data["propdmg"] > 0) | (data["cropdmg"] > 0)),
sub("marine tstm wind", "strong wind", data$evtype),
as.character(data$evtype))
# urban/sml stream fld  (hard to tell without additional information weather this category refers to flooding or flash flooding)
# - flash floods do not exist for more than 2 to 3 days
# - table floods / flash floods and default to most common.
data$evtype <-
ifelse((data$evtype == "urban/sml stream fld") & ((data$endxdate - data$bgnxdate) <= 3),
sub("urban/sml stream fld", "flash flood", data$evtype),
as.character(data$evtype))
data$evtype <-
ifelse((data$evtype == "urban/sml stream fld") & ((data$endxdate - data$bgnxdate) <= 3),
as.character(data$evtype),
sub("urban/sml stream fld", "flood", data$evtype))
# wild/forest fire  == wildfire
data$evtype <- gsub("wild/forest fire", "wildfire", data$evtype)
# winter weather/mix  = winter weather
data$evtype <- gsub("winter weather/mix", "winter weather", data$evtype)
# tstm wind/hail  no real way to categorise this into one category so left alone
# flash flooding == flash flood
data$evtype <- gsub("flash flooding", "flash flood", data$evtype)
# extreme cold  = extreme cold/wind chill
data$evtype <- gsub("extreme cold.*", "extreme cold/wind chill", data$evtype)
# flood/flash flood  (as long as flood is less than or equal to 3 days, assume flash flood, this is because flash floods are far more common ~2x as likely and is otherwise up to recorders discression (no finite boundaries between the two)
data$evtype <-
ifelse((data$evtype == "flood/flash flood") & ((data$endxdate - data$bgnxdate) <= 3),
as.character(data$evtype),
sub("flood/flash flood", "flood", data$evtype))
data$evtype <-
ifelse((data$evtype == "flood/flash flood") & ((data$endxdate - data$bgnxdate) <= 3),
sub("flood/flash flood", "flood", data$evtype),
as.character(data$evtype))
data$evtype <-
ifelse( grepl("flood", data$evtype) & !grepl("flash", data$evtype),
"flood",
as.character(data$evtype))
# snow  (heavy snow is only snow related category, definition of heavy snow is regionally defined so difficult to categorise with data availible) so leave this variable alone
# hail is labelled by its size, remove size labelling from the end of hail
data$evtype <- sub("^hail [0-9]*", "hail", data$evtype)
# landslide / mudslide are categorised as debris flow
data$evtype <- sub("landslide", "debris flow", data$evtype)
data$evtype <- sub("mudslide", "debris flow", data$evtype)
# hurricane (typhoon) often labelled as "hurricane" or "hurricane/typhoon"
data$evtype <- sub("hurricane", "hurricane (typhoon)", data$evtype)
data$evtype <- sub("typhoon", "hurricane (typhoon)", data$evtype)
subset <- select(data, bgnxdate, endxdate, year, evtype, fatalities, injuries, propdmg, propdmgexp, cropdmg, cropdmgexp, remarks, wfo, refnum) %>%
filter(year > 1995)
subset <- subset[subset$evtype %in% eventNames,]
subset$evtype <- factor(subset$evtype) # resets the levels
qplot(bgnxdate, data = subset, binwidth = 365, ylim = c(0,80000))
yearly.observations <- group_by(subset, year) %>%
summarise(events = n())
# We use a linear model instead of just relating observations as a proportion of acutal 2011 readings so that the system is "smoothed", if 2011 is slightly above/below average it doesn't have a big effect and if the year you are weighting had a lot of tornadoes that doesn't have a large effect on how heat waves are weighted that year.
year.model <- lm(events ~ year, yearly.observations)
years <- yearly.observations$year
year.predict <- predict(year.model, data.frame(year = seq(1996,2011,1)))
yearly.observations$lmpredict <- year.predict
yearly.observations <- mutate(yearly.observations, weighting = lmpredict[length(lmpredict)] / lmpredict, weighted.events = events*weighting)
qplot(year, weighted.events, data=yearly.observations, ylim=c(0,80000)) + geom_smooth(method="lm")
evtype.health <- group_by(subset,year, evtype) %>%
summarise(injuries = sum(injuries), fatalities = sum(fatalities))
weighted.injuries <- select(evtype.health, -fatalities) %>%
spread(evtype, injuries)
weighted.injuries[,2:length(weighted.injuries)] <- apply(weighted.injuries[,2:length(weighted.injuries)], 2, function(x) x*yearly.observations$weighting)
weighted.injuries <- gather(weighted.injuries, evtype, injuries, -year)
weighted.fatalities <- select(evtype.health, -injuries) %>%
spread(evtype, fatalities)
weighted.fatalities[,2:length(weighted.fatalities)] <- apply(weighted.fatalities[,2:length(weighted.fatalities)], 2, function(x) x*yearly.observations$weighting)
weighted.fatalities <- gather(weighted.fatalities, evtype, fatalities, -year)
weighted.evtype.health <- weighted.injuries
weighted.evtype.health$fatalities <- weighted.fatalities$fatalities
total.injuries <- group_by(weighted.evtype.health, evtype) %>%
summarise(injuries = sum(injuries, na.rm=T), fatalities = sum(fatalities, na.rm=T)) %>%
arrange(desc(injuries))
temp <- head(arrange(total.injuries, desc(injuries)),10)
qplot(evtype, injuries, data=temp)
temp <- head(arrange(total.injuries, desc(fatalities)),10)
qplot(evtype, fatalities, data=temp)
filter(subset, propdmgexp == "0")
subset$cropdmgexp <- factor(subset$cropdmgexp)
subset$propdmgexp <- factor(subset$propdmgexp)
subset$propdmgexp[which(subset$propdmgexp == "0")] <- NA
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
} else {(subset$cropdamage <- NA
}
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else {(subset$propdamage <- NA)
}
if (subset$cropdmgexp == "K") {subset$cropdamage <- subset$cropdmg * 1000
}else if (subset$cropdmgexp == "M") {subset$cropdamage <- subset$cropdmg * 1000000
}else if (subset$cropdmgexp == "B") {subset$cropdamage <- subset$cropdmg * 1000000000
} else (subset$cropdamage <- NA
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else (subset$propdamage <- NA)
if (subset$cropdmgexp == "K") { subset$cropdamage <- subset$cropdmg * 1000
} else if (subset$cropdmgexp == "M") { subset$cropdamage <- subset$cropdmg * 1000000
} else if (subset$cropdmgexp == "B") { subset$cropdamage <- subset$cropdmg * 1000000000
} else { subset$cropdamage <- NA
}
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else {subset$propdamage <- NA)
}
if (subset$cropdmgexp == "K") { subset$cropdamage <- subset$cropdmg * 1000
} else if (subset$cropdmgexp == "M") { subset$cropdamage <- subset$cropdmg * 1000000
} else if (subset$cropdmgexp == "B") { subset$cropdamage <- subset$cropdmg * 1000000000
} else { subset$cropdamage <- NA
}
if (subset$propdmgexp == "K") {subset$propdamage <- subset$propdmg * 1000
}else if (subset$propdmgexp == "M") {subset$propdamage <- subset$propdmg * 1000000
}else if (subset$propdmgexp == "B") {subset$propdamage <- subset$propdmg * 1000000000
} else {subset$propdamage <- NA
}
damage.analysis <- select(subset, evtype, cropdamage, propdamage, year) %>%
group_by(evtype, year) %>%
summarise(cropdamage = sum(cropdamage), propdamage = sum(propdamage))
weighted.cropdmg <- select(damage.analysis, -propdamage) %>%
spread(evtype, cropdamage)
weighted.cropdmg[,2:length(weighted.cropdmg)] <- apply(weighted.cropdmg[,2:length(weighted.cropdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.cropdmg <- gather(weighted.cropdmg, evtype, cropdamage, -year)
weighted.propdmg <- select(damage.analysis, -cropdamage) %>%
spread(evtype, propdamage)
weighted.propdmg[,2:length(weighted.propdmg)] <- apply(weighted.propdmg[,2:length(weighted.propdmg)], 2, function(x) x*yearly.observations$weighting)
weighted.propdmg <- gather(weighted.propdmg, evtype, propdamage, -year)
weighted.damage <- weighted.cropdmg
weighted.damage$propdamage <- weighted.propdmg$propdamage
test <- group_by(weighted.damage, evtype) %>%
summarise(cropdamage = sum(cropdamage, na.rm=T), propdamage = sum(propdamage, na.rm=T))
temp <- arrange(test, desc(cropdamage))
qplot(evtype,  cropdamage, data=head(temp))
temp <- arrange(test, desc(propdamage))
qplot(evtype, propdamage, data=head(temp))
years
years <- mutate(data, year= year(bgnxdate)) %>%
group_by(year) %>%
summarise(number=n())
years
summary(years)
head(years)
tail(years)
years[year==2006]]
years[year==2006]
years[year==2006,]
years["year"==2006,]
filter(years, year == 2006)
filter(years, year == c(1950,1960,1970,1980,1990,2000,2010)
)
filter(years, year == 1950 | 1960 | 1970 | 1980 |1990 | 2000 | 2010)
filter(years, year == 1950 | year == 1960 | year == 1970 | year == 1980 | year == 1990 | year == 2000 | year == 2010)
filter(years, year %in% c(1950,1960))
filter(years, year %in% c(1950,1960, 1970, 1980, 1990, 2000, 2010))
?nrow
(sum(matches) + nrow(filter(data, evtype == "tstm wind" | evtype == "maritime tstm wind"))) / nrow(data)
not.matched <- group_by(data[!matches,], evtype) %>%
summarise(number = n()) %>%
arrange(desc(number))
# Proportion of the unmatched evtypes captured by the 10 most common mislabelled evtypes.
sum(not.matched[1:10,2]) / sum(not.matched[,2])
# Top 15 unmatched evtypes. (event types)
head(not.matched, 15)
matches <- sapply(data$evtype, function(x) x %in% eventNames)
# Proportion of events matched to allowed event names. (evtype)
sum(matches) / nrow(data)
matches <- sapply(data$evtype, function(x) x %in% eventNames)
not.matched <- group_by(data[!matches,], evtype) %>%
summarise(number = n()) %>%
arrange(desc(number))
# Proportion of the unmatched evtypes captured by the 10 most common mislabelled evtypes.
sum(not.matched[1:10,2]) / sum(not.matched[,2])
# Top 15 unmatched evtypes. (event types)
head(not.matched, 15)
filter(data, evtype == "tstm wind" | evtype == "marine tstm wind")
nrow(filter(data, evtype == "tstm wind" | evtype == "marine tstm wind"))
test<- filter(data, evtype == "tstm wind" | evtype == "marine tstm wind")
